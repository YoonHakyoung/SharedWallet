package com.company.myweb.asset;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.company.myweb.member.MemberVo;

@Controller
@RequestMapping("/asset")
public class AssetController {

    @Autowired
    private AssetService assetService;
    
    @Autowired
    private AssetVo assetVo;
    

    @GetMapping("/addAssetForm")
    public String addAssetForm() {
        return "asset/add_asset_form";
    }

    @PostMapping("/addAssetConfirm")
    public String addAssetConfirm(@ModelAttribute("assetVo") AssetVo assetVo, HttpSession session) {
        MemberVo loggedMember = (MemberVo) session.getAttribute("loggedMember");

        if (loggedMember != null) {
            String groupId = loggedMember.getGroup_id();

            String userSelectedDate = assetVo.getA_date();

            assetVo.setA_date(userSelectedDate);

            int result = assetService.addAsset(assetVo, groupId);

            if (result > 0) {
                return "asset/add_asset_ok";
            } else {
                // Add asset failed
                return "asset/add_asset_ng";
            }
        } else {
            // 로그인되지 않은 상태에서는 로그인 페이지로 이동
            return "redirect:/myweb/member/loginForm";
        }
    }
    
    @GetMapping("/listAssets")
    public String listAssets(HttpSession session, Model model) {
        MemberVo loggedMember = (MemberVo) session.getAttribute("loggedMember");

        if (loggedMember != null) {
            String groupId = loggedMember.getGroup_id();
            List<AssetVo> assetList = assetService.getAssetsByGroupId(groupId);

            List<String> sortedAssets = assetService.getSortExpenses(assetList);
            model.addAttribute("sortedAssets", sortedAssets);
            // 카테고리 배열을 가져와 모델에 추가
            List<String> categories = assetVo.get;  // a_category의 distinct 값들을 가져오는 메서드를 가정
            model.addAttribute("categories", categories);
            
            return "asset/list_assets";
        } else {
            // 로그인되지 않은 상태에서는 로그인 페이지로 이동
            return "redirect:/myweb/member/loginForm";
        }
    }
    
    
    @GetMapping("/dashboard")
    public String showDashboard(HttpSession session, Model model) {
        MemberVo loggedMember = (MemberVo) session.getAttribute("loggedMember");

        if (loggedMember != null) {
            String groupId = loggedMember.getGroup_id();
            List<AssetVo> assetList = assetService.getAssetsByGroupId(groupId);
            
            int monthlyExpenditure = assetService.calculateMonthlyExpenditure(assetList);
            String mostExpensiveCategory = assetService.findMostExpensiveCategory(assetList);
            String monthlyIncrease = assetService.calculateMonthlyIncrease(assetList);
            List<String> recentExpenses = assetService.getRecentExpenses(assetList);
            Map<String, Integer> categoryExpenses = assetService.calculateCategoryExpenses(assetList);

            model.addAttribute("loggedMember", loggedMember);
            model.addAttribute("monthlyExpenditure", monthlyExpenditure);
            model.addAttribute("mostExpensiveCategory", mostExpensiveCategory);
            model.addAttribute("monthlyIncrease", monthlyIncrease);
            model.addAttribute("recentExpenses", recentExpenses);
            model.addAttribute("categoryExpenses", categoryExpenses);

            return "dashboard";
        } else {
            return "redirect:/myweb/member/loginForm";
        }
    }

}
